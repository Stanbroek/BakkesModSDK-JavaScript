void bind_GameWrapper([[maybe_unused]] v8::Isolate* isolate, v8pp::module& module)
{

	v8pp::class_<GameWrapper> cl_GameWrapper(isolate);
	cl_GameWrapper.ctor<uintptr_t, long int, std::type_index>();
	cl_GameWrapper.set<bool(GameWrapper::*)()>("IsInGame", &GameWrapper::IsInGame);
	cl_GameWrapper.set<bool(GameWrapper::*)()>("IsInOnlineGame", &GameWrapper::IsInOnlineGame);
	cl_GameWrapper.set<bool(GameWrapper::*)()>("IsInFreeplay", &GameWrapper::IsInFreeplay);
	cl_GameWrapper.set<bool(GameWrapper::*)()>("IsInReplay", &GameWrapper::IsInReplay);
	cl_GameWrapper.set<bool(GameWrapper::*)()>("IsInCustomTraining", &GameWrapper::IsInCustomTraining);
	cl_GameWrapper.set<bool(GameWrapper::*)()>("IsSpectatingInOnlineGame", &GameWrapper::IsSpectatingInOnlineGame);
	cl_GameWrapper.set<bool(GameWrapper::*)()>("IsPaused", &GameWrapper::IsPaused);
	cl_GameWrapper.set<bool(GameWrapper::*)()>("IsUsingEpicVersion", &GameWrapper::IsUsingEpicVersion);
	cl_GameWrapper.set<bool(GameWrapper::*)()>("IsUsingSteamVersion", &GameWrapper::IsUsingSteamVersion);
	cl_GameWrapper.set<int(GameWrapper::*)()>("GetSteamVersion", &GameWrapper::GetSteamVersion);
	cl_GameWrapper.set<std::string(GameWrapper::*)()>("GetPsyBuildID", &GameWrapper::GetPsyBuildID);
	cl_GameWrapper.set<ServerWrapper(GameWrapper::*)()>("GetCurrentGameState", &GameWrapper::GetCurrentGameState);
	cl_GameWrapper.set<ServerWrapper(GameWrapper::*)()>("GetOnlineGame", &GameWrapper::GetOnlineGame);
	cl_GameWrapper.set<ServerWrapper(GameWrapper::*)()>("GetGameEventAsServer", &GameWrapper::GetGameEventAsServer);
	cl_GameWrapper.set<ReplayServerWrapper(GameWrapper::*)()>("GetGameEventAsReplay", &GameWrapper::GetGameEventAsReplay);
	cl_GameWrapper.set<MMRWrapper(GameWrapper::*)()>("GetMMRWrapper", &GameWrapper::GetMMRWrapper);
	cl_GameWrapper.set<CarWrapper(GameWrapper::*)()>("GetLocalCar", &GameWrapper::GetLocalCar);
	cl_GameWrapper.set<CameraWrapper(GameWrapper::*)()>("GetCamera", &GameWrapper::GetCamera);
	cl_GameWrapper.set<EngineTAWrapper(GameWrapper::*)()>("GetEngine", &GameWrapper::GetEngine);
	cl_GameWrapper.set<PluginManagerWrapper(GameWrapper::*)()>("GetPluginManager", &GameWrapper::GetPluginManager);
	//cl_GameWrapper.set<GuiManagerWrapper(GameWrapper::*)()>("GetGUIManager", &GameWrapper::GetGUIManager);
	cl_GameWrapper.set<PlayerControllerWrapper(GameWrapper::*)()>("GetPlayerController", &GameWrapper::GetPlayerController);
	cl_GameWrapper.set<ItemsWrapper(GameWrapper::*)()>("GetItemsWrapper", &GameWrapper::GetItemsWrapper);
	cl_GameWrapper.set<MatchmakingWrapper(GameWrapper::*)()>("GetMatchmakingWrapper", &GameWrapper::GetMatchmakingWrapper);
	cl_GameWrapper.set<SettingsWrapper(GameWrapper::*)()>("GetSettings", &GameWrapper::GetSettings);
	cl_GameWrapper.set<ModalWrapper(GameWrapper::*)(std::string const &)>("CreateModal", &GameWrapper::CreateModal);
	cl_GameWrapper.set<TextInputModalWrapper(GameWrapper::*)(std::string const &)>("CreateTextInputModal", &GameWrapper::CreateTextInputModal);
	//cl_GameWrapper.set<void(GameWrapper::*)(void *, size_t)>("OverrideParams", &GameWrapper::OverrideParams);
	cl_GameWrapper.set<void(GameWrapper::*)(std::function<void (GameWrapper *)>, float)>("SetTimeout", &GameWrapper::SetTimeout);
	cl_GameWrapper.set<void(GameWrapper::*)(std::function<void (GameWrapper *)>)>("Execute", &GameWrapper::Execute);
	cl_GameWrapper.set<void(GameWrapper::*)(std::function<void (CanvasWrapper)>)>("RegisterDrawable", &GameWrapper::RegisterDrawable);
	cl_GameWrapper.set<void(GameWrapper::*)()>("UnregisterDrawables", &GameWrapper::UnregisterDrawables);
	cl_GameWrapper.set<std::string(GameWrapper::*)(int)>("GetFNameByIndex", &GameWrapper::GetFNameByIndex);
	cl_GameWrapper.set<int(GameWrapper::*)(std::string)>("GetFNameIndexByString", &GameWrapper::GetFNameIndexByString);
	cl_GameWrapper.set<void(GameWrapper::*)(std::string, std::function<void (std::basic_string<char>)>)>("HookEvent", &GameWrapper::HookEvent);
	cl_GameWrapper.set<void(GameWrapper::*)(std::string)>("UnhookEvent", &GameWrapper::UnhookEvent);
	cl_GameWrapper.set<void(GameWrapper::*)(std::string, std::function<void (std::basic_string<char>)>)>("HookEventPost", &GameWrapper::HookEventPost);
	cl_GameWrapper.set<void(GameWrapper::*)(std::string)>("UnhookEventPost", &GameWrapper::UnhookEventPost);
	cl_GameWrapper.set<void(GameWrapper::*)(std::string, std::string)>("LogToChatbox", &GameWrapper::LogToChatbox);
	cl_GameWrapper.set<void(GameWrapper::*)(std::string, std::string)>("LoadToastTexture", &GameWrapper::LoadToastTexture);
	cl_GameWrapper.set<void(GameWrapper::*)(std::string, std::wstring)>("LoadToastTexture", &GameWrapper::LoadToastTexture);
	cl_GameWrapper.set<void(GameWrapper::*)(std::string, std::string, std::string, float, uint8_t, float, float)>("Toast", &GameWrapper::Toast);
	cl_GameWrapper.set<bool(GameWrapper::*)(int)>("IsKeyPressed", &GameWrapper::IsKeyPressed);
	cl_GameWrapper.set<int(GameWrapper::*)()>("IsCursorVisible", &GameWrapper::IsCursorVisible);
	cl_GameWrapper.set<void(GameWrapper::*)(std::string)>("ExecuteUnrealCommand", &GameWrapper::ExecuteUnrealCommand);
	cl_GameWrapper.set<std::string(GameWrapper::*)()>("GetRandomMap", &GameWrapper::GetRandomMap);
	cl_GameWrapper.set<std::string(GameWrapper::*)()>("GetCurrentMap", &GameWrapper::GetCurrentMap);
	cl_GameWrapper.set<long long unsigned int(GameWrapper::*)()>("GetSteamID", &GameWrapper::GetSteamID);
	cl_GameWrapper.set<std::string(GameWrapper::*)()>("GetEpicID", &GameWrapper::GetEpicID);
	cl_GameWrapper.set<UniqueIDWrapper(GameWrapper::*)()>("GetUniqueID", &GameWrapper::GetUniqueID);
	cl_GameWrapper.set<UnrealStringWrapper(GameWrapper::*)()>("GetPlayerName", &GameWrapper::GetPlayerName);
	cl_GameWrapper.set<ClubDetailsWrapper(GameWrapper::*)()>("GetLocalClub", &GameWrapper::GetLocalClub);
	cl_GameWrapper.set<SequenceWrapper(GameWrapper::*)()>("GetMainSequence", &GameWrapper::GetMainSequence);
	// [deprecated] cl_GameWrapper.set<void(GameWrapper::*)(PriWrapper &, BotLoadoutData const &)>("SetBotLoadout", &GameWrapper::SetBotLoadout);
	cl_GameWrapper.set<Vector2(GameWrapper::*)()>("GetScreenSize", &GameWrapper::GetScreenSize);
	cl_GameWrapper.set<float(GameWrapper::*)()>("GetSafeZoneRatio", &GameWrapper::GetSafeZoneRatio);
	cl_GameWrapper.set<float(GameWrapper::*)()>("GetUIScale", &GameWrapper::GetUIScale);
	cl_GameWrapper.set<unsigned int(GameWrapper::*)()>("GetbMetric", &GameWrapper::GetbMetric);
	cl_GameWrapper.set<UnrealStringWrapper(GameWrapper::*)()>("GetUILanguage", &GameWrapper::GetUILanguage);
	cl_GameWrapper.set<bool(GameWrapper::*)()>("GetbColorBlind", &GameWrapper::GetbColorBlind);
	cl_GameWrapper.set<std::wstring(GameWrapper::*)()>("GetBakkesModPathW", &GameWrapper::GetBakkesModPathW);
	cl_GameWrapper.set<std::wstring(GameWrapper::*)()>("GetDataFolderW", &GameWrapper::GetDataFolderW);
	cl_GameWrapper.set<int(GameWrapper::*)()>("GetBakkesModVersion", &GameWrapper::GetBakkesModVersion);
	cl_GameWrapper.set<void(GameWrapper::*)(std::wstring const &)>("PlayReplay", &GameWrapper::PlayReplay);
	cl_GameWrapper.set<void(GameWrapper::*)(std::string, std::function<void (ServerWrapper, void *, std::basic_string<char>)>)>("HookEventWithCaller", &GameWrapper::HookEventWithCaller);
	cl_GameWrapper.set<void(GameWrapper::*)(std::string, std::function<void (ActorWrapper, void *, std::basic_string<char>)>)>("HookEventWithCaller", &GameWrapper::HookEventWithCaller);
	cl_GameWrapper.set<void(GameWrapper::*)(std::string, std::function<void (CarWrapper, void *, std::basic_string<char>)>)>("HookEventWithCaller", &GameWrapper::HookEventWithCaller);
	cl_GameWrapper.set<void(GameWrapper::*)(std::string, std::function<void (CarComponentWrapper, void *, std::basic_string<char>)>)>("HookEventWithCaller", &GameWrapper::HookEventWithCaller);
	cl_GameWrapper.set<void(GameWrapper::*)(std::string, std::function<void (PlayerControllerWrapper, void *, std::basic_string<char>)>)>("HookEventWithCaller", &GameWrapper::HookEventWithCaller);
	cl_GameWrapper.set<void(GameWrapper::*)(std::string, std::function<void (BallWrapper, void *, std::basic_string<char>)>)>("HookEventWithCaller", &GameWrapper::HookEventWithCaller);
	cl_GameWrapper.set<void(GameWrapper::*)(std::string, std::function<void (ActorWrapper, void *, std::basic_string<char>)>)>("HookEventWithCallerPost", &GameWrapper::HookEventWithCallerPost);
	cl_GameWrapper.set<void(GameWrapper::*)(std::string, std::function<void (ServerWrapper, void *, std::basic_string<char>)>)>("HookEventWithCallerPost", &GameWrapper::HookEventWithCallerPost);
	cl_GameWrapper.set<void(GameWrapper::*)(std::string, std::function<void (CarWrapper, void *, std::basic_string<char>)>)>("HookEventWithCallerPost", &GameWrapper::HookEventWithCallerPost);
	cl_GameWrapper.set<void(GameWrapper::*)(std::string, std::function<void (CarComponentWrapper, void *, std::basic_string<char>)>)>("HookEventWithCallerPost", &GameWrapper::HookEventWithCallerPost);
	cl_GameWrapper.set<void(GameWrapper::*)(std::string, std::function<void (PlayerControllerWrapper, void *, std::basic_string<char>)>)>("HookEventWithCallerPost", &GameWrapper::HookEventWithCallerPost);
	cl_GameWrapper.set<void(GameWrapper::*)(std::string, std::function<void (BallWrapper, void *, std::basic_string<char>)>)>("HookEventWithCallerPost", &GameWrapper::HookEventWithCallerPost);
	//cl_GameWrapper.set("pimpl", &GameWrapper::pimpl);

	module.set("GameWrapper", cl_GameWrapper);
}
