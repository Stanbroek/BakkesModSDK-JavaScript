void bind_PlayerControllerWrapper([[maybe_unused]] v8::Isolate* isolate, v8pp::module& module)
{

	v8pp::class_<PlayerControllerWrapper> cl_PlayerControllerWrapper(isolate);
	cl_PlayerControllerWrapper.inherit<ActorWrapper>();
	cl_PlayerControllerWrapper.ctor<uintptr_t>();
	cl_PlayerControllerWrapper.set<CarWrapper(PlayerControllerWrapper::*)()>("GetCar", &PlayerControllerWrapper::GetCar);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)(CarWrapper)>("SetCar", &PlayerControllerWrapper::SetCar);
	cl_PlayerControllerWrapper.set<PriWrapper(PlayerControllerWrapper::*)()>("GetPRI", &PlayerControllerWrapper::GetPRI);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)(PriWrapper)>("SetPRI", &PlayerControllerWrapper::SetPRI);
	cl_PlayerControllerWrapper.set<ControllerInput(PlayerControllerWrapper::*)()>("GetVehicleInput", &PlayerControllerWrapper::GetVehicleInput);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)(ControllerInput)>("SetVehicleInput", &PlayerControllerWrapper::SetVehicleInput);
	cl_PlayerControllerWrapper.set<long unsigned int(PlayerControllerWrapper::*)()>("GetbReceivedServerShutdownMessage", &PlayerControllerWrapper::GetbReceivedServerShutdownMessage);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)(long unsigned int)>("SetbReceivedServerShutdownMessage", &PlayerControllerWrapper::SetbReceivedServerShutdownMessage);
	cl_PlayerControllerWrapper.set<long unsigned int(PlayerControllerWrapper::*)()>("GetbUseDebugInputs", &PlayerControllerWrapper::GetbUseDebugInputs);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)(long unsigned int)>("SetbUseDebugInputs", &PlayerControllerWrapper::SetbUseDebugInputs);
	cl_PlayerControllerWrapper.set<long unsigned int(PlayerControllerWrapper::*)()>("GetbJumpPressed", &PlayerControllerWrapper::GetbJumpPressed);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)(long unsigned int)>("SetbJumpPressed", &PlayerControllerWrapper::SetbJumpPressed);
	cl_PlayerControllerWrapper.set<long unsigned int(PlayerControllerWrapper::*)()>("GetbBoostPressed", &PlayerControllerWrapper::GetbBoostPressed);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)(long unsigned int)>("SetbBoostPressed", &PlayerControllerWrapper::SetbBoostPressed);
	cl_PlayerControllerWrapper.set<long unsigned int(PlayerControllerWrapper::*)()>("GetbHandbrakePressed", &PlayerControllerWrapper::GetbHandbrakePressed);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)(long unsigned int)>("SetbHandbrakePressed", &PlayerControllerWrapper::SetbHandbrakePressed);
	cl_PlayerControllerWrapper.set<long unsigned int(PlayerControllerWrapper::*)()>("GetbHasPitchedBack", &PlayerControllerWrapper::GetbHasPitchedBack);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)(long unsigned int)>("SetbHasPitchedBack", &PlayerControllerWrapper::SetbHasPitchedBack);
	cl_PlayerControllerWrapper.set<long unsigned int(PlayerControllerWrapper::*)()>("GetbAllowAsymmetricalMute", &PlayerControllerWrapper::GetbAllowAsymmetricalMute);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)(long unsigned int)>("SetbAllowAsymmetricalMute", &PlayerControllerWrapper::SetbAllowAsymmetricalMute);
	cl_PlayerControllerWrapper.set<long unsigned int(PlayerControllerWrapper::*)()>("GetbResetCamera", &PlayerControllerWrapper::GetbResetCamera);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)(long unsigned int)>("SetbResetCamera", &PlayerControllerWrapper::SetbResetCamera);
	cl_PlayerControllerWrapper.set<UnrealStringWrapper(PlayerControllerWrapper::*)()>("GetLoginURL", &PlayerControllerWrapper::GetLoginURL);
	cl_PlayerControllerWrapper.set<unsigned char(PlayerControllerWrapper::*)()>("GetVoiceFilter", &PlayerControllerWrapper::GetVoiceFilter);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)(unsigned char)>("SetVoiceFilter", &PlayerControllerWrapper::SetVoiceFilter);
	cl_PlayerControllerWrapper.set<unsigned char(PlayerControllerWrapper::*)()>("GetChatFilter", &PlayerControllerWrapper::GetChatFilter);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)(unsigned char)>("SetChatFilter", &PlayerControllerWrapper::SetChatFilter);
	cl_PlayerControllerWrapper.set<PriWrapper(PlayerControllerWrapper::*)()>("GetFollowTarget", &PlayerControllerWrapper::GetFollowTarget);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)(PriWrapper)>("SetFollowTarget", &PlayerControllerWrapper::SetFollowTarget);
	cl_PlayerControllerWrapper.set<BaseCameraWrapper(PlayerControllerWrapper::*)()>("GetSpectatorCameraArchetype", &PlayerControllerWrapper::GetSpectatorCameraArchetype);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)(BaseCameraWrapper)>("SetSpectatorCameraArchetype", &PlayerControllerWrapper::SetSpectatorCameraArchetype);
	cl_PlayerControllerWrapper.set<BaseCameraWrapper(PlayerControllerWrapper::*)()>("GetEditorCameraArchetype", &PlayerControllerWrapper::GetEditorCameraArchetype);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)(BaseCameraWrapper)>("SetEditorCameraArchetype", &PlayerControllerWrapper::SetEditorCameraArchetype);
	cl_PlayerControllerWrapper.set<Vector(PlayerControllerWrapper::*)()>("GetMoveActorGrabOffset", &PlayerControllerWrapper::GetMoveActorGrabOffset);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)(Vector)>("SetMoveActorGrabOffset", &PlayerControllerWrapper::SetMoveActorGrabOffset);
	cl_PlayerControllerWrapper.set<float(PlayerControllerWrapper::*)()>("GetMoveActorGrabIncrement", &PlayerControllerWrapper::GetMoveActorGrabIncrement);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)(float)>("SetMoveActorGrabIncrement", &PlayerControllerWrapper::SetMoveActorGrabIncrement);
	cl_PlayerControllerWrapper.set<float(PlayerControllerWrapper::*)()>("GetMinMoveActorGrabDistance", &PlayerControllerWrapper::GetMinMoveActorGrabDistance);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)(float)>("SetMinMoveActorGrabDistance", &PlayerControllerWrapper::SetMinMoveActorGrabDistance);
	cl_PlayerControllerWrapper.set<float(PlayerControllerWrapper::*)()>("GetMouseIncrementSpeed", &PlayerControllerWrapper::GetMouseIncrementSpeed);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)(float)>("SetMouseIncrementSpeed", &PlayerControllerWrapper::SetMouseIncrementSpeed);
	cl_PlayerControllerWrapper.set<float(PlayerControllerWrapper::*)()>("GetBallVelocityIncrementAmount", &PlayerControllerWrapper::GetBallVelocityIncrementAmount);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)(float)>("SetBallVelocityIncrementAmount", &PlayerControllerWrapper::SetBallVelocityIncrementAmount);
	cl_PlayerControllerWrapper.set<int(PlayerControllerWrapper::*)()>("GetBallVelocityIncrementFireCount", &PlayerControllerWrapper::GetBallVelocityIncrementFireCount);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)(int)>("SetBallVelocityIncrementFireCount", &PlayerControllerWrapper::SetBallVelocityIncrementFireCount);
	cl_PlayerControllerWrapper.set<float(PlayerControllerWrapper::*)()>("GetBallVelocityIncrementFireCountMax", &PlayerControllerWrapper::GetBallVelocityIncrementFireCountMax);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)(float)>("SetBallVelocityIncrementFireCountMax", &PlayerControllerWrapper::SetBallVelocityIncrementFireCountMax);
	cl_PlayerControllerWrapper.set<float(PlayerControllerWrapper::*)()>("GetBallVelocityIncrementSpeedDefault", &PlayerControllerWrapper::GetBallVelocityIncrementSpeedDefault);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)(float)>("SetBallVelocityIncrementSpeedDefault", &PlayerControllerWrapper::SetBallVelocityIncrementSpeedDefault);
	cl_PlayerControllerWrapper.set<float(PlayerControllerWrapper::*)()>("GetBallVelocityIncrementSpeedMax", &PlayerControllerWrapper::GetBallVelocityIncrementSpeedMax);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)(float)>("SetBallVelocityIncrementSpeedMax", &PlayerControllerWrapper::SetBallVelocityIncrementSpeedMax);
	cl_PlayerControllerWrapper.set<float(PlayerControllerWrapper::*)()>("GetCrosshairTraceDistance", &PlayerControllerWrapper::GetCrosshairTraceDistance);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)(float)>("SetCrosshairTraceDistance", &PlayerControllerWrapper::SetCrosshairTraceDistance);
	cl_PlayerControllerWrapper.set<ActorWrapper(PlayerControllerWrapper::*)()>("GetTracedCrosshairActor", &PlayerControllerWrapper::GetTracedCrosshairActor);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)(ActorWrapper)>("SetTracedCrosshairActor", &PlayerControllerWrapper::SetTracedCrosshairActor);
	cl_PlayerControllerWrapper.set<Vector(PlayerControllerWrapper::*)()>("GetRotateActorCameraLocationOffset", &PlayerControllerWrapper::GetRotateActorCameraLocationOffset);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)(Vector)>("SetRotateActorCameraLocationOffset", &PlayerControllerWrapper::SetRotateActorCameraLocationOffset);
	cl_PlayerControllerWrapper.set<Vector(PlayerControllerWrapper::*)()>("GetRotateActorCameraRotationOffset", &PlayerControllerWrapper::GetRotateActorCameraRotationOffset);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)(Vector)>("SetRotateActorCameraRotationOffset", &PlayerControllerWrapper::SetRotateActorCameraRotationOffset);
	cl_PlayerControllerWrapper.set<int(PlayerControllerWrapper::*)()>("GetRotateActorCameraSide", &PlayerControllerWrapper::GetRotateActorCameraSide);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)(int)>("SetRotateActorCameraSide", &PlayerControllerWrapper::SetRotateActorCameraSide);
	cl_PlayerControllerWrapper.set<float(PlayerControllerWrapper::*)()>("GetDesiredCameraSide", &PlayerControllerWrapper::GetDesiredCameraSide);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)(float)>("SetDesiredCameraSide", &PlayerControllerWrapper::SetDesiredCameraSide);
	cl_PlayerControllerWrapper.set<float(PlayerControllerWrapper::*)()>("GetPawnTypeChangedTime", &PlayerControllerWrapper::GetPawnTypeChangedTime);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)(float)>("SetPawnTypeChangedTime", &PlayerControllerWrapper::SetPawnTypeChangedTime);
	cl_PlayerControllerWrapper.set<int(PlayerControllerWrapper::*)()>("GetSelectedSpawnArchetype", &PlayerControllerWrapper::GetSelectedSpawnArchetype);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)(int)>("SetSelectedSpawnArchetype", &PlayerControllerWrapper::SetSelectedSpawnArchetype);
	cl_PlayerControllerWrapper.set<ControllerInput(PlayerControllerWrapper::*)()>("GetDebugInputs", &PlayerControllerWrapper::GetDebugInputs);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)(ControllerInput)>("SetDebugInputs", &PlayerControllerWrapper::SetDebugInputs);
	cl_PlayerControllerWrapper.set<int(PlayerControllerWrapper::*)()>("GetMinClientInputRate", &PlayerControllerWrapper::GetMinClientInputRate);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)(int)>("SetMinClientInputRate", &PlayerControllerWrapper::SetMinClientInputRate);
	cl_PlayerControllerWrapper.set<int(PlayerControllerWrapper::*)()>("GetMedianClientInputRate", &PlayerControllerWrapper::GetMedianClientInputRate);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)(int)>("SetMedianClientInputRate", &PlayerControllerWrapper::SetMedianClientInputRate);
	cl_PlayerControllerWrapper.set<int(PlayerControllerWrapper::*)()>("GetMaxClientInputRate", &PlayerControllerWrapper::GetMaxClientInputRate);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)(int)>("SetMaxClientInputRate", &PlayerControllerWrapper::SetMaxClientInputRate);
	cl_PlayerControllerWrapper.set<int(PlayerControllerWrapper::*)()>("GetConfiguredClientInputRate", &PlayerControllerWrapper::GetConfiguredClientInputRate);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)(int)>("SetConfiguredClientInputRate", &PlayerControllerWrapper::SetConfiguredClientInputRate);
	cl_PlayerControllerWrapper.set<float(PlayerControllerWrapper::*)()>("GetTimeSinceLastMovePacket", &PlayerControllerWrapper::GetTimeSinceLastMovePacket);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)(float)>("SetTimeSinceLastMovePacket", &PlayerControllerWrapper::SetTimeSinceLastMovePacket);
	cl_PlayerControllerWrapper.set<float(PlayerControllerWrapper::*)()>("GetTimeLastReplicatedMovePacket", &PlayerControllerWrapper::GetTimeLastReplicatedMovePacket);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)(float)>("SetTimeLastReplicatedMovePacket", &PlayerControllerWrapper::SetTimeLastReplicatedMovePacket);
	cl_PlayerControllerWrapper.set<float(PlayerControllerWrapper::*)()>("GetMouseXDeadZone", &PlayerControllerWrapper::GetMouseXDeadZone);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)(float)>("SetMouseXDeadZone", &PlayerControllerWrapper::SetMouseXDeadZone);
	cl_PlayerControllerWrapper.set<float(PlayerControllerWrapper::*)()>("GetMouseYDeadZone", &PlayerControllerWrapper::GetMouseYDeadZone);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)(float)>("SetMouseYDeadZone", &PlayerControllerWrapper::SetMouseYDeadZone);
	cl_PlayerControllerWrapper.set<float(PlayerControllerWrapper::*)()>("GetMouseXDeadZoneAir", &PlayerControllerWrapper::GetMouseXDeadZoneAir);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)(float)>("SetMouseXDeadZoneAir", &PlayerControllerWrapper::SetMouseXDeadZoneAir);
	cl_PlayerControllerWrapper.set<float(PlayerControllerWrapper::*)()>("GetMouseYDeadZoneAir", &PlayerControllerWrapper::GetMouseYDeadZoneAir);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)(float)>("SetMouseYDeadZoneAir", &PlayerControllerWrapper::SetMouseYDeadZoneAir);
	cl_PlayerControllerWrapper.set<ControllerInput(PlayerControllerWrapper::*)()>("GetLastInputs", &PlayerControllerWrapper::GetLastInputs);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)(ControllerInput)>("SetLastInputs", &PlayerControllerWrapper::SetLastInputs);
	cl_PlayerControllerWrapper.set<PriWrapper(PlayerControllerWrapper::*)()>("GetPendingViewPRI", &PlayerControllerWrapper::GetPendingViewPRI);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)(PriWrapper)>("SetPendingViewPRI", &PlayerControllerWrapper::SetPendingViewPRI);
	cl_PlayerControllerWrapper.set<float(PlayerControllerWrapper::*)()>("GetLastInputPitchUp", &PlayerControllerWrapper::GetLastInputPitchUp);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)(float)>("SetLastInputPitchUp", &PlayerControllerWrapper::SetLastInputPitchUp);
	cl_PlayerControllerWrapper.set<float(PlayerControllerWrapper::*)()>("GetLastInputPitchDown", &PlayerControllerWrapper::GetLastInputPitchDown);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)(float)>("SetLastInputPitchDown", &PlayerControllerWrapper::SetLastInputPitchDown);
	cl_PlayerControllerWrapper.set<float(PlayerControllerWrapper::*)()>("GetLastInputYawLeft", &PlayerControllerWrapper::GetLastInputYawLeft);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)(float)>("SetLastInputYawLeft", &PlayerControllerWrapper::SetLastInputYawLeft);
	cl_PlayerControllerWrapper.set<float(PlayerControllerWrapper::*)()>("GetLastInputYawRight", &PlayerControllerWrapper::GetLastInputYawRight);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)(float)>("SetLastInputYawRight", &PlayerControllerWrapper::SetLastInputYawRight);
	cl_PlayerControllerWrapper.set<float(PlayerControllerWrapper::*)()>("GetLastInputPitch", &PlayerControllerWrapper::GetLastInputPitch);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)(float)>("SetLastInputPitch", &PlayerControllerWrapper::SetLastInputPitch);
	cl_PlayerControllerWrapper.set<float(PlayerControllerWrapper::*)()>("GetLastInputYaw", &PlayerControllerWrapper::GetLastInputYaw);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)(float)>("SetLastInputYaw", &PlayerControllerWrapper::SetLastInputYaw);
	cl_PlayerControllerWrapper.set<float(PlayerControllerWrapper::*)()>("GetMouseInputMax", &PlayerControllerWrapper::GetMouseInputMax);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)(float)>("SetMouseInputMax", &PlayerControllerWrapper::SetMouseInputMax);
	cl_PlayerControllerWrapper.set<EngineTAWrapper(PlayerControllerWrapper::*)()>("GetEngineShare", &PlayerControllerWrapper::GetEngineShare);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)(EngineTAWrapper)>("SetEngineShare", &PlayerControllerWrapper::SetEngineShare);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)(PriWrapper)>("HandleCarSet", &PlayerControllerWrapper::HandleCarSet);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)()>("SpawnSelectedArchetype", &PlayerControllerWrapper::SpawnSelectedArchetype);
	cl_PlayerControllerWrapper.set<bool(PlayerControllerWrapper::*)()>("RemoveActor", &PlayerControllerWrapper::RemoveActor);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)()>("ToggleGrabActor", &PlayerControllerWrapper::ToggleGrabActor);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)()>("ToggleRotateActor", &PlayerControllerWrapper::ToggleRotateActor);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)()>("EditorReleaseActor", &PlayerControllerWrapper::EditorReleaseActor);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)()>("EditorCycleActor", &PlayerControllerWrapper::EditorCycleActor);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)()>("DuplicateShot", &PlayerControllerWrapper::DuplicateShot);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)()>("StopEditing", &PlayerControllerWrapper::StopEditing);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)()>("EditorIncreasePower", &PlayerControllerWrapper::EditorIncreasePower);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)()>("EditorDecreasePower", &PlayerControllerWrapper::EditorDecreasePower);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)()>("EditorIncreasePowerToggleInterim", &PlayerControllerWrapper::EditorIncreasePowerToggleInterim);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)()>("EditorDecreasePowerToggleInterim", &PlayerControllerWrapper::EditorDecreasePowerToggleInterim);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)(long unsigned int)>("EditorIncreasePowerToggle2", &PlayerControllerWrapper::EditorIncreasePowerToggle2);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)(long unsigned int)>("EditorDecreasePowerToggle2", &PlayerControllerWrapper::EditorDecreasePowerToggle2);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)(int)>("ModifyEditorPower", &PlayerControllerWrapper::ModifyEditorPower);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)()>("ToggleCameraPosition", &PlayerControllerWrapper::ToggleCameraPosition);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)()>("EditorUndo", &PlayerControllerWrapper::EditorUndo);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)()>("EditorRedo", &PlayerControllerWrapper::EditorRedo);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)()>("EditorIncreaseRoundTime", &PlayerControllerWrapper::EditorIncreaseRoundTime);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)()>("EditorDecreaseRoundTime", &PlayerControllerWrapper::EditorDecreaseRoundTime);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)()>("EditorNextRound", &PlayerControllerWrapper::EditorNextRound);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)()>("EditorPrevRound", &PlayerControllerWrapper::EditorPrevRound);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)()>("UpdateCrosshair", &PlayerControllerWrapper::UpdateCrosshair);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)(int)>("NetClientInputRate", &PlayerControllerWrapper::NetClientInputRate);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)(ServerWrapper)>("ServerCreateMatchBroadcast", &PlayerControllerWrapper::ServerCreateMatchBroadcast);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)()>("ClampMoveActorGrabOffset", &PlayerControllerWrapper::ClampMoveActorGrabOffset);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)()>("RevertToDefaultCameraHUDInput", &PlayerControllerWrapper::RevertToDefaultCameraHUDInput);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)()>("SwitchToEditPawn", &PlayerControllerWrapper::SwitchToEditPawn);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)(long unsigned int)>("ServerResetPlayer", &PlayerControllerWrapper::ServerResetPlayer);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)()>("ResetPlayerRun", &PlayerControllerWrapper::ResetPlayerRun);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)()>("ResetPlayerCheckpoint", &PlayerControllerWrapper::ResetPlayerCheckpoint);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)()>("ToggleEditorRound", &PlayerControllerWrapper::ToggleEditorRound);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)()>("ToggleBetweenCarAndEditPawn", &PlayerControllerWrapper::ToggleBetweenCarAndEditPawn);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)()>("Interact", &PlayerControllerWrapper::Interact);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)(long unsigned int)>("StopMovement", &PlayerControllerWrapper::StopMovement);
	cl_PlayerControllerWrapper.set<Vector(PlayerControllerWrapper::*)(float, long unsigned int)>("GetRotateActorCameraOffset", &PlayerControllerWrapper::GetRotateActorCameraOffset);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)()>("RestoreEditorPawnOrientation", &PlayerControllerWrapper::RestoreEditorPawnOrientation);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)()>("BackupEditorPawnOrientation", &PlayerControllerWrapper::BackupEditorPawnOrientation);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)(float)>("UpdateRotatedActorOrientation", &PlayerControllerWrapper::UpdateRotatedActorOrientation);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)()>("OnOpenPauseMenu", &PlayerControllerWrapper::OnOpenPauseMenu);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)()>("ResetMouseCenter", &PlayerControllerWrapper::ResetMouseCenter);
	cl_PlayerControllerWrapper.set<float(PlayerControllerWrapper::*)(float, float, float, float)>("CalculateMouseAxis", &PlayerControllerWrapper::CalculateMouseAxis);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)()>("ShowControllerApplet", &PlayerControllerWrapper::ShowControllerApplet);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)()>("ShowAccountPicker", &PlayerControllerWrapper::ShowAccountPicker);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)()>("QueSaveReplay", &PlayerControllerWrapper::QueSaveReplay);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)(PriWrapper)>("SetFollowTarget2", &PlayerControllerWrapper::SetFollowTarget2);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)(PriWrapper)>("FollowPlayer", &PlayerControllerWrapper::FollowPlayer);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)(SteamID &, long unsigned int, std::string)>("ClientSplitscreenJoinResponse", &PlayerControllerWrapper::ClientSplitscreenJoinResponse);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)(SteamID &, std::string)>("ServerRequestSplitscreenJoin", &PlayerControllerWrapper::ServerRequestSplitscreenJoin);
	cl_PlayerControllerWrapper.set<bool(PlayerControllerWrapper::*)(std::string, unsigned char, long unsigned int)>("eventPreClientTravel", &PlayerControllerWrapper::eventPreClientTravel);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)(int)>("NotifyGoalScored", &PlayerControllerWrapper::NotifyGoalScored);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)()>("eventDestroyed", &PlayerControllerWrapper::eventDestroyed);
	cl_PlayerControllerWrapper.set<bool(PlayerControllerWrapper::*)(PlayerControllerWrapper)>("ShouldBeMuted", &PlayerControllerWrapper::ShouldBeMuted);
	cl_PlayerControllerWrapper.set<bool(PlayerControllerWrapper::*)(unsigned char, PlayerControllerWrapper, long unsigned int)>("IsCommunicationFiltered", &PlayerControllerWrapper::IsCommunicationFiltered);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)(long unsigned int)>("RefreshMutedPlayers", &PlayerControllerWrapper::RefreshMutedPlayers);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)(SteamID &)>("eventServerUnmutePlayer", &PlayerControllerWrapper::eventServerUnmutePlayer);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)(SteamID &)>("eventServerMutePlayer", &PlayerControllerWrapper::eventServerMutePlayer);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)(SteamID &)>("GameplayUnmutePlayer", &PlayerControllerWrapper::GameplayUnmutePlayer);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)(SteamID &)>("GameplayMutePlayer", &PlayerControllerWrapper::GameplayMutePlayer);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)(unsigned char)>("ServerSetChatFilter", &PlayerControllerWrapper::ServerSetChatFilter);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)(unsigned char)>("ServerSetVoiceFilter", &PlayerControllerWrapper::ServerSetVoiceFilter);
	cl_PlayerControllerWrapper.set<bool(PlayerControllerWrapper::*)(SteamID &)>("IsExplictlyMuted", &PlayerControllerWrapper::IsExplictlyMuted);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)()>("DebugAI", &PlayerControllerWrapper::DebugAI);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)()>("SendPendingRPCs", &PlayerControllerWrapper::SendPendingRPCs);
	cl_PlayerControllerWrapper.set<bool(PlayerControllerWrapper::*)(long unsigned int)>("CanSendMessage", &PlayerControllerWrapper::CanSendMessage);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)(long long unsigned int)>("ClientNotifyChatBanned", &PlayerControllerWrapper::ClientNotifyChatBanned);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)(float)>("ClientNotifyChatDisabled", &PlayerControllerWrapper::ClientNotifyChatDisabled);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)(PlayerReplicationInfoWrapper, std::string, unsigned char, long unsigned int)>("ChatMessage_TA", &PlayerControllerWrapper::ChatMessage_TA);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)(std::string, unsigned char, long unsigned int)>("ServerSayInternal_TA", &PlayerControllerWrapper::ServerSayInternal_TA);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)(std::string, unsigned char, long unsigned int)>("ServerSay_TA", &PlayerControllerWrapper::ServerSay_TA);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)(std::string, unsigned char, SteamID &, long unsigned int)>("Say_TA2", &PlayerControllerWrapper::Say_TA2);
	cl_PlayerControllerWrapper.set<bool(PlayerControllerWrapper::*)(PlayerControllerWrapper, long unsigned int)>("CanChatWith", &PlayerControllerWrapper::CanChatWith);
	cl_PlayerControllerWrapper.set<bool(PlayerControllerWrapper::*)(std::string)>("AllowTextMessage", &PlayerControllerWrapper::AllowTextMessage);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)()>("PushToTalkEnd", &PlayerControllerWrapper::PushToTalkEnd);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)()>("PushToTalk2", &PlayerControllerWrapper::PushToTalk2);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)(long unsigned int, std::string)>("HandleJoinGameMigrationCompleted", &PlayerControllerWrapper::HandleJoinGameMigrationCompleted);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)(SteamID &)>("eventClientUnmutePlayer", &PlayerControllerWrapper::eventClientUnmutePlayer);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)(SteamID &, long unsigned int)>("eventClientMutePlayer", &PlayerControllerWrapper::eventClientMutePlayer);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)()>("ClientSetOnlineStatus", &PlayerControllerWrapper::ClientSetOnlineStatus);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)(int, int)>("HandleGameDataSelected", &PlayerControllerWrapper::HandleGameDataSelected);
	cl_PlayerControllerWrapper.set<GameEventWrapper(PlayerControllerWrapper::*)()>("GetGameEvent", &PlayerControllerWrapper::GetGameEvent);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)()>("ClientArbitratedMatchEnded", &PlayerControllerWrapper::ClientArbitratedMatchEnded);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)()>("BannedKick", &PlayerControllerWrapper::BannedKick);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)()>("NoReservationKick", &PlayerControllerWrapper::NoReservationKick);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)()>("IdleKick2", &PlayerControllerWrapper::IdleKick2);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)()>("ServerReportServer", &PlayerControllerWrapper::ServerReportServer);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)(Vector &, Rotator &)>("ClientUseItem", &PlayerControllerWrapper::ClientUseItem);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)(Vector &, Rotator &)>("ServerTeleportCar", &PlayerControllerWrapper::ServerTeleportCar);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)(Vector &, Rotator &)>("eventTeleportCar", &PlayerControllerWrapper::eventTeleportCar);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)(RBActorWrapper)>("ServerUsePickup", &PlayerControllerWrapper::ServerUsePickup);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)()>("UsePickup2", &PlayerControllerWrapper::UsePickup2);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)(long unsigned int)>("ToggleHandbrake", &PlayerControllerWrapper::ToggleHandbrake);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)(long unsigned int)>("ToggleBoost", &PlayerControllerWrapper::ToggleBoost);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)(long unsigned int)>("ToggleJump", &PlayerControllerWrapper::ToggleJump);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)()>("TargetSelectLeft", &PlayerControllerWrapper::TargetSelectLeft);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)()>("TargetSelectRight", &PlayerControllerWrapper::TargetSelectRight);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)()>("ReleaseRearCamera", &PlayerControllerWrapper::ReleaseRearCamera);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)()>("PressRearCamera", &PlayerControllerWrapper::PressRearCamera);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)()>("ReleaseSecondaryCamera", &PlayerControllerWrapper::ReleaseSecondaryCamera);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)()>("PressSecondaryCamera", &PlayerControllerWrapper::PressSecondaryCamera);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)()>("ReadyUp", &PlayerControllerWrapper::ReadyUp);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)()>("Spectate", &PlayerControllerWrapper::Spectate);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)(int)>("ChangeTeam", &PlayerControllerWrapper::ChangeTeam);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)()>("SwitchTeam", &PlayerControllerWrapper::SwitchTeam);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)()>("SetDefaultCameraMode", &PlayerControllerWrapper::SetDefaultCameraMode);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)()>("ResetCameraMode", &PlayerControllerWrapper::ResetCameraMode);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)()>("ZeroMoveInput", &PlayerControllerWrapper::ZeroMoveInput);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)(float)>("PlayerMove", &PlayerControllerWrapper::PlayerMove);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)(long unsigned int)>("IgnoreMoveInput", &PlayerControllerWrapper::IgnoreMoveInput);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)()>("eventSendClientAdjustment", &PlayerControllerWrapper::eventSendClientAdjustment);
	cl_PlayerControllerWrapper.set<PlayerControllerWrapper(PlayerControllerWrapper::*)()>("GetPrimaryPlayerController", &PlayerControllerWrapper::GetPrimaryPlayerController);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)(BoostWrapper)>("HandleAddBoostComponent", &PlayerControllerWrapper::HandleAddBoostComponent);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)()>("ReplicateLoadout", &PlayerControllerWrapper::ReplicateLoadout);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)()>("ReplicateCameraRotation", &PlayerControllerWrapper::ReplicateCameraRotation);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)(long unsigned int)>("SetUsingFreecam", &PlayerControllerWrapper::SetUsingFreecam);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)(long unsigned int)>("SetUsingBehindView", &PlayerControllerWrapper::SetUsingBehindView);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)(long unsigned int)>("SetUsingSecondaryCamera", &PlayerControllerWrapper::SetUsingSecondaryCamera);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)()>("ReplicateCameraSettings", &PlayerControllerWrapper::ReplicateCameraSettings);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)(PriWrapper)>("HandleControllerLayoutChanged", &PlayerControllerWrapper::HandleControllerLayoutChanged);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)(PriWrapper)>("HandlePawnTypeChanged", &PlayerControllerWrapper::HandlePawnTypeChanged);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)(PriWrapper)>("HandlePendingViewCarSet", &PlayerControllerWrapper::HandlePendingViewCarSet);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)(PriWrapper)>("HandleReplaceBot", &PlayerControllerWrapper::HandleReplaceBot);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)(PriXWrapper)>("HandleTeamChanged", &PlayerControllerWrapper::HandleTeamChanged);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)(ServerWrapper)>("HandleMatchEnded", &PlayerControllerWrapper::HandleMatchEnded);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)(ServerWrapper)>("HandleStartNewRound", &PlayerControllerWrapper::HandleStartNewRound);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)(PriWrapper)>("HandleGameEventChanged", &PlayerControllerWrapper::HandleGameEventChanged);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)(PriWrapper)>("HandlePRICameraChanged", &PlayerControllerWrapper::HandlePRICameraChanged);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)()>("SetupLightBar", &PlayerControllerWrapper::SetupLightBar);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)(PriWrapper)>("HandlePersistentCameraSet", &PlayerControllerWrapper::HandlePersistentCameraSet);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)()>("OnReceivedPlayerAndPRI", &PlayerControllerWrapper::OnReceivedPlayerAndPRI);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)()>("UpdateVoiceFilter", &PlayerControllerWrapper::UpdateVoiceFilter);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)()>("ReplicateLevelSessionID", &PlayerControllerWrapper::ReplicateLevelSessionID);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)(unsigned char)>("ServerInitInputBuffer", &PlayerControllerWrapper::ServerInitInputBuffer);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)()>("eventReceivedPlayer", &PlayerControllerWrapper::eventReceivedPlayer);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)()>("eventPostBeginPlay", &PlayerControllerWrapper::eventPostBeginPlay);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)(PlayerControllerWrapper, std::string, long unsigned int)>("EventChatMessage", &PlayerControllerWrapper::EventChatMessage);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)(PlayerControllerWrapper, long unsigned int)>("EventResetPlayer", &PlayerControllerWrapper::EventResetPlayer);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)(PlayerControllerWrapper, int)>("EventSelectBallCamTarget", &PlayerControllerWrapper::EventSelectBallCamTarget);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)()>("EventTrainingEditorActorModified", &PlayerControllerWrapper::EventTrainingEditorActorModified);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)(PlayerControllerWrapper, SteamID &, long unsigned int)>("EventMuteChanged", &PlayerControllerWrapper::EventMuteChanged);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)()>("EventLaunchControllerApplet", &PlayerControllerWrapper::EventLaunchControllerApplet);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)(int)>("EventLaunchAccountPicker", &PlayerControllerWrapper::EventLaunchAccountPicker);
	cl_PlayerControllerWrapper.set<bool(PlayerControllerWrapper::*)()>("GetbUsingGamepad", &PlayerControllerWrapper::GetbUsingGamepad);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)(float)>("SetMouseSensitivity", &PlayerControllerWrapper::SetMouseSensitivity);
	cl_PlayerControllerWrapper.set<float(PlayerControllerWrapper::*)()>("GetMouseSensitivity", &PlayerControllerWrapper::GetMouseSensitivity);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)(float)>("SetAForward", &PlayerControllerWrapper::SetAForward);
	cl_PlayerControllerWrapper.set<float(PlayerControllerWrapper::*)()>("GetAForward", &PlayerControllerWrapper::GetAForward);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)(float)>("SetATurn", &PlayerControllerWrapper::SetATurn);
	cl_PlayerControllerWrapper.set<float(PlayerControllerWrapper::*)()>("GetATurn", &PlayerControllerWrapper::GetATurn);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)(float)>("SetAStrafe", &PlayerControllerWrapper::SetAStrafe);
	cl_PlayerControllerWrapper.set<float(PlayerControllerWrapper::*)()>("GetAStrafe", &PlayerControllerWrapper::GetAStrafe);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)(float)>("SetAUp", &PlayerControllerWrapper::SetAUp);
	cl_PlayerControllerWrapper.set<float(PlayerControllerWrapper::*)()>("GetAUp", &PlayerControllerWrapper::GetAUp);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)(float)>("SetALookUp", &PlayerControllerWrapper::SetALookUp);
	cl_PlayerControllerWrapper.set<float(PlayerControllerWrapper::*)()>("GetALookUp", &PlayerControllerWrapper::GetALookUp);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)(float)>("SetLookRightScale", &PlayerControllerWrapper::SetLookRightScale);
	cl_PlayerControllerWrapper.set<float(PlayerControllerWrapper::*)()>("GetLookRightScale", &PlayerControllerWrapper::GetLookRightScale);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)(float)>("SetLookUpScale", &PlayerControllerWrapper::SetLookUpScale);
	cl_PlayerControllerWrapper.set<float(PlayerControllerWrapper::*)()>("GetLookUpScale", &PlayerControllerWrapper::GetLookUpScale);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)(float)>("SetGamepadLookScale", &PlayerControllerWrapper::SetGamepadLookScale);
	cl_PlayerControllerWrapper.set<float(PlayerControllerWrapper::*)()>("GetGamepadLookScale", &PlayerControllerWrapper::GetGamepadLookScale);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)(float)>("SetALookRoll", &PlayerControllerWrapper::SetALookRoll);
	cl_PlayerControllerWrapper.set<float(PlayerControllerWrapper::*)()>("GetALookRoll", &PlayerControllerWrapper::GetALookRoll);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)(bool)>("SetbRoll", &PlayerControllerWrapper::SetbRoll);
	cl_PlayerControllerWrapper.set<bool(PlayerControllerWrapper::*)()>("GetbRoll", &PlayerControllerWrapper::GetbRoll);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)(float)>("SetSpectatorCameraAccel", &PlayerControllerWrapper::SetSpectatorCameraAccel);
	cl_PlayerControllerWrapper.set<float(PlayerControllerWrapper::*)()>("GetSpectatorCameraAccel", &PlayerControllerWrapper::GetSpectatorCameraAccel);
	cl_PlayerControllerWrapper.set<void(PlayerControllerWrapper::*)(float)>("SetSpectatorCameraSpeed", &PlayerControllerWrapper::SetSpectatorCameraSpeed);
	cl_PlayerControllerWrapper.set<float(PlayerControllerWrapper::*)()>("GetSpectatorCameraSpeed", &PlayerControllerWrapper::GetSpectatorCameraSpeed);

	module.set("PlayerControllerWrapper", cl_PlayerControllerWrapper);
}
