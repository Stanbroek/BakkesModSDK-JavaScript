ToastType [enumeration]
    ('ToastType_Info', 0)
    ('ToastType_OK', 1)
    ('ToastType_Warning', 2)
    ('ToastType_Error', 3)

FVector [class declaration]
FRotator [class declaration]
Vector [struct]
public:
    Vector::X [variable]
    Vector::Y [variable]
    Vector::Z [variable]
    Vector::Vector(FVector v) [constructor]
    Vector::Vector(float x, float y, float z) [constructor]
    Vector::Vector(float def) [constructor]
    Vector::Vector() [constructor]
    FVector Vector::operator ::FVector() [casting operator]
    Vector Vector::operator+=(Vector const v2) [member operator]
    Vector Vector::operator-=(Vector const v2) [member operator]
    Vector Vector::operator*=(Vector const v2) [member operator]
    Vector Vector::operator/=(Vector const v2) [member operator]
    Vector Vector::operator+=(float const f) [member operator]
    Vector Vector::operator-=(float const f) [member operator]
    Vector Vector::operator*=(float const f) [member operator]
    Vector Vector::operator/=(float const f) [member operator]
    float Vector::magnitude() const [member function]
    void Vector::normalize() [member function]
    Vector Vector::getNormalized() [member function]
    Vector Vector::clone() const [member function]
    static float Vector::dot(Vector const v1, Vector const v2) [member function]
    static Vector Vector::cross(Vector const v1, Vector const v2) [member function]
    static Vector Vector::lerp(Vector const v1, Vector const v2, float const t) [member function]
    static Vector Vector::slerp(Vector const v1, Vector const v2, float const t) [member function]
    Vector::Vector(Vector const & arg0) [constructor]
    Vector::~Vector() [destructor]
    Vector & Vector::operator=(Vector const & arg0) [member operator]

Vector operator+(Vector const v1, Vector const v2) [free operator]
Vector operator-(Vector const v1, Vector const v2) [free operator]
Vector operator*(Vector const v1, Vector const v2) [free operator]
Vector operator/(Vector const v1, Vector const v2) [free operator]
Vector operator+(Vector const v1, float const f) [free operator]
Vector operator-(Vector const v1, float const f) [free operator]
Vector operator*(Vector const v1, float const f) [free operator]
Vector operator/(Vector const v1, float const f) [free operator]
Rotator [struct]
public:
    Rotator::Pitch [variable]
    Rotator::Yaw [variable]
    Rotator::Roll [variable]
    Rotator::Rotator(FRotator r) [constructor]
    Rotator::Rotator(int pitch, int yaw, int roll) [constructor]
    Rotator::Rotator(int def) [constructor]
    Rotator::Rotator() [constructor]
    FRotator Rotator::operator ::FRotator() [casting operator]
    Rotator Rotator::operator+=(Rotator const r2) [member operator]
    Rotator Rotator::operator-=(Rotator const r2) [member operator]
    Rotator Rotator::operator*=(Rotator const r2) [member operator]
    Rotator Rotator::operator/=(Rotator const r2) [member operator]
    Rotator::Rotator(Rotator const & arg0) [constructor]
    Rotator::~Rotator() [destructor]
    Rotator & Rotator::operator=(Rotator const & arg0) [member operator]

Rotator operator+(Rotator const r1, Rotator const r2) [free operator]
Rotator operator-(Rotator const r1, Rotator const r2) [free operator]
Rotator operator*(Rotator const r1, Rotator const r2) [free operator]
Rotator operator/(Rotator const r1, Rotator const r2) [free operator]
int fixRotator(int newRotation) [free function]
int fixPitch(int newRotation) [free function]
Rotator VectorToRotator(Vector const vVector) [free function]
Vector RotatorToVector(Rotator const R) [free function]
Quat [struct]
public:
    Quat::X [variable]
    Quat::Y [variable]
    Quat::Z [variable]
    Quat::W [variable]
    Quat::Quat(float w, float x, float y, float z) [constructor]
    Quat::Quat() [constructor]
    Quat Quat::conjugate() const [member function]
    Quat Quat::normalize() [member function]
    Quat Quat::operator*=(Quat const q2) [member operator]
    Quat::Quat(Quat const & arg0) [constructor]
    Quat::~Quat() [destructor]
    Quat & Quat::operator=(Quat const & arg0) [member operator]

Quat operator*(Quat const q1, Quat const q2) [free operator]
Quat QuatSlerp(Quat const q1, Quat const q2, float percent) [free function]
Vector RotateVectorWithQuat(Vector const v, Quat const q) [free function]
Quat RotatorToQuat(Rotator const rot) [free function]
Rotator QuatToRotator(Quat const q) [free function]
Vector2 [struct]
public:
    Vector2::X [variable]
    Vector2::Y [variable]
    Vector2 Vector2::minus(Vector2 const other) const [member function]
    Vector2 Vector2::operator+=(Vector2 const v2) [member operator]
    Vector2 Vector2::operator-=(Vector2 const v2) [member operator]
    Vector2 Vector2::operator*=(Vector2 const v2) [member operator]
    Vector2 Vector2::operator/=(Vector2 const v2) [member operator]
    Vector2 Vector2::operator+=(int const i) [member operator]
    Vector2 Vector2::operator-=(int const i) [member operator]
    Vector2 Vector2::operator*=(int const i) [member operator]
    Vector2 Vector2::operator/=(int const i) [member operator]
    Vector2::Vector2() [constructor]
    Vector2::Vector2(Vector2 const & arg0) [constructor]
    Vector2::~Vector2() [destructor]
    Vector2 & Vector2::operator=(Vector2 const & arg0) [member operator]

Vector2 operator+(Vector2 const v1, Vector2 const v2) [free operator]
Vector2 operator-(Vector2 const v1, Vector2 const v2) [free operator]
Vector2 operator*(Vector2 const v1, Vector2 const v2) [free operator]
Vector2 operator/(Vector2 const v1, Vector2 const v2) [free operator]
Vector2 operator+(Vector2 const v1, int const i) [free operator]
Vector2 operator-(Vector2 const v1, int const i) [free operator]
Vector2 operator*(Vector2 const v1, int const i) [free operator]
Vector2 operator/(Vector2 const v1, int const i) [free operator]
Vector2F [struct]
public:
    Vector2F::X [variable]
    Vector2F::Y [variable]
    Vector2F Vector2F::minus(Vector2 const other) const [member function]
    Vector2F Vector2F::minus(Vector2F const other) const [member function]
    Vector2F Vector2F::operator+=(Vector2 const v2) [member operator]
    Vector2F Vector2F::operator-=(Vector2 const v2) [member operator]
    Vector2F Vector2F::operator*=(Vector2 const v2) [member operator]
    Vector2F Vector2F::operator/=(Vector2 const v2) [member operator]
    Vector2F Vector2F::operator+=(Vector2F const v2) [member operator]
    Vector2F Vector2F::operator-=(Vector2F const v2) [member operator]
    Vector2F Vector2F::operator*=(Vector2F const v2) [member operator]
    Vector2F Vector2F::operator/=(Vector2F const v2) [member operator]
    Vector2F Vector2F::operator+=(float const f) [member operator]
    Vector2F Vector2F::operator-=(float const f) [member operator]
    Vector2F Vector2F::operator*=(float const f) [member operator]
    Vector2F Vector2F::operator/=(float const f) [member operator]
    Vector2F::Vector2F() [constructor]
    Vector2F::Vector2F(Vector2F const & arg0) [constructor]
    Vector2F::~Vector2F() [destructor]
    Vector2F & Vector2F::operator=(Vector2F const & arg0) [member operator]

Vector2F operator+(Vector2F const v1, Vector2 const v2) [free operator]
Vector2F operator-(Vector2F const v1, Vector2 const v2) [free operator]
Vector2F operator*(Vector2F const v1, Vector2 const v2) [free operator]
Vector2F operator/(Vector2F const v1, Vector2 const v2) [free operator]
Vector2F operator+(Vector2F const v1, Vector2F const v2) [free operator]
Vector2F operator-(Vector2F const v1, Vector2F const v2) [free operator]
Vector2F operator*(Vector2F const v1, Vector2F const v2) [free operator]
Vector2F operator/(Vector2F const v1, Vector2F const v2) [free operator]
Vector2F operator+(Vector2F const v1, float const f) [free operator]
Vector2F operator-(Vector2F const v1, float const f) [free operator]
Vector2F operator*(Vector2F const v1, float const f) [free operator]
Vector2F operator/(Vector2F const v1, float const f) [free operator]
LinearColor [struct]
public:
    LinearColor::R [variable]
    LinearColor::G [variable]
    LinearColor::B [variable]
    LinearColor::A [variable]
    LinearColor LinearColor::operator*=(float const f) [member operator]
    LinearColor LinearColor::operator/=(float const f) [member operator]
    LinearColor::LinearColor() [constructor]
    LinearColor::LinearColor(LinearColor const & arg0) [constructor]
    LinearColor::~LinearColor() [destructor]
    LinearColor & LinearColor::operator=(LinearColor const & arg0) [member operator]

LinearColor operator*(LinearColor const c1, float const f) [free operator]
LinearColor operator/(LinearColor const c1, float const f) [free operator]
bool operator==(LinearColor const c1, LinearColor const c2) [free operator]
bool operator!=(LinearColor const c1, LinearColor const c2) [free operator]
PredictionInfo [struct]
public:
    PredictionInfo::Time [variable]
    PredictionInfo::ArchTopTime [variable]
    PredictionInfo::Location [variable]
    PredictionInfo::Velocity [variable]
    PredictionInfo::ArchTop [variable]
    PredictionInfo::ArchTopVelocity [variable]
    PredictionInfo::bHitWall [variable]
    PredictionInfo::bHitGround [variable]
    PredictionInfo::PredictionInfo() [constructor]
    PredictionInfo::PredictionInfo(PredictionInfo const & arg0) [constructor]
    PredictionInfo & PredictionInfo::operator=(PredictionInfo const & arg0) [member operator]
    PredictionInfo::~PredictionInfo() [destructor]

SteamID [struct]
public:
    SteamID::ID [variable]
    SteamID::SteamID() [constructor]
    SteamID::SteamID(SteamID const & arg0) [constructor]
    SteamID & SteamID::operator=(SteamID const & arg0) [member operator]
    SteamID::~SteamID() [destructor]

SkillRating [struct]
public:
    SkillRating::Mu [variable]
    SkillRating::Sigma [variable]
    SkillRating::SkillRating() [constructor]
    SkillRating::SkillRating(SkillRating const & arg0) [constructor]
    SkillRating & SkillRating::operator=(SkillRating const & arg0) [member operator]
    SkillRating::~SkillRating() [destructor]

SkillRank [struct]
public:
    SkillRank::Tier [variable]
    SkillRank::Division [variable]
    SkillRank::MatchesPlayed [variable]
    SkillRank::SkillRank() [constructor]
    SkillRank::SkillRank(SkillRank const & arg0) [constructor]
    SkillRank & SkillRank::operator=(SkillRank const & arg0) [member operator]
    SkillRank::~SkillRank() [destructor]

UnrealColor [struct]
public:
    UnrealColor::B [variable]
    UnrealColor::G [variable]
    UnrealColor::R [variable]
    UnrealColor::A [variable]
    UnrealColor::UnrealColor() [constructor]
    UnrealColor::UnrealColor(UnrealColor const & arg0) [constructor]
    UnrealColor & UnrealColor::operator=(UnrealColor const & arg0) [member operator]
    UnrealColor::~UnrealColor() [destructor]

ControllerInput [struct]
public:
    ControllerInput::Throttle [variable]
    ControllerInput::Steer [variable]
    ControllerInput::Pitch [variable]
    ControllerInput::Yaw [variable]
    ControllerInput::Roll [variable]
    ControllerInput::DodgeForward [variable]
    ControllerInput::DodgeStrafe [variable]
    ControllerInput::Handbrake [variable]
    ControllerInput::Jump [variable]
    ControllerInput::ActivateBoost [variable]
    ControllerInput::HoldingBoost [variable]
    ControllerInput::Jumped [variable]
    ControllerInput::ControllerInput() [constructor]
    ControllerInput::ControllerInput(ControllerInput const & arg0) [constructor]
    ControllerInput & ControllerInput::operator=(ControllerInput const & arg0) [member operator]
    ControllerInput::~ControllerInput() [destructor]

RecordedSample [struct]
public:
    RecordedSample::Low [variable]
    RecordedSample::High [variable]
    RecordedSample::RecordedSample() [constructor]
    RecordedSample::RecordedSample(RecordedSample const & arg0) [constructor]
    RecordedSample & RecordedSample::operator=(RecordedSample const & arg0) [member operator]
    RecordedSample::~RecordedSample() [destructor]

POV [struct]
public:
    POV::location [variable]
    POV::rotation [variable]
    POV::FOV [variable]
    POV::POV() [constructor]
    POV::POV(POV const & arg0) [constructor]
    POV & POV::operator=(POV const & arg0) [member operator]
    POV::~POV() [destructor]

ViewTarget [struct]
public:
    ViewTarget::Target [variable]
    ViewTarget::Controller [variable]
    ViewTarget::POV [variable]
    ViewTarget::AspectRatio [variable]
    ViewTarget::PRI [variable]
    ViewTarget::ViewTarget() [constructor]
    ViewTarget::ViewTarget(ViewTarget const & arg0) [constructor]
    ViewTarget & ViewTarget::operator=(ViewTarget const & arg0) [member operator]
    ViewTarget::~ViewTarget() [destructor]

CameraSave [struct]
public:
    CameraSave::InvertSwivelPitch [variable]
    CameraSave::CameraShake [variable]
    CameraSave::CameraSave() [constructor]
    CameraSave::CameraSave(CameraSave const & arg0) [constructor]
    CameraSave & CameraSave::operator=(CameraSave const & arg0) [member operator]
    CameraSave::~CameraSave() [destructor]

ProfileCameraSettings [struct]
public:
    ProfileCameraSettings::FOV [variable]
    ProfileCameraSettings::Height [variable]
    ProfileCameraSettings::Pitch [variable]
    ProfileCameraSettings::Distance [variable]
    ProfileCameraSettings::Stiffness [variable]
    ProfileCameraSettings::SwivelSpeed [variable]
    ProfileCameraSettings::TransitionSpeed [variable]
    ProfileCameraSettings::ProfileCameraSettings() [constructor]
    ProfileCameraSettings::ProfileCameraSettings(ProfileCameraSettings const & arg0) [constructor]
    ProfileCameraSettings & ProfileCameraSettings::operator=(ProfileCameraSettings const & arg0) [member operator]
    ProfileCameraSettings::~ProfileCameraSettings() [destructor]

GamepadSettings [struct]
public:
    GamepadSettings::ControllerDeadzone [variable]
    GamepadSettings::DodgeInputThreshold [variable]
    GamepadSettings::SteeringSensitivity [variable]
    GamepadSettings::AirControlSensitivity [variable]
    GamepadSettings::GamepadSettings() [constructor]
    GamepadSettings::GamepadSettings(GamepadSettings const & arg0) [constructor]
    GamepadSettings & GamepadSettings::operator=(GamepadSettings const & arg0) [member operator]
    GamepadSettings::~GamepadSettings() [destructor]

RBState [struct]
public:
    RBState::Quaternion [variable]
    RBState::Location [variable]
    RBState::LinearVelocity [variable]
    RBState::AngularVelocity [variable]
    RBState::Time [variable]
    RBState::bSleeping [variable]
    RBState::bNewData [variable]
    RBState::RBState() [constructor]
    RBState::RBState(RBState const & arg0) [constructor]
    RBState & RBState::operator=(RBState const & arg0) [member operator]
    RBState::~RBState() [destructor]

WorldContactData [struct]
public:
    WorldContactData::bHasContact [variable]
    WorldContactData::Location [variable]
    WorldContactData::Velocity [variable]
    WorldContactData::Normal [variable]
    WorldContactData::WorldContactData() [constructor]
    WorldContactData::WorldContactData(WorldContactData const & arg0) [constructor]
    WorldContactData & WorldContactData::operator=(WorldContactData const & arg0) [member operator]
    WorldContactData::~WorldContactData() [destructor]

StickyForceData [struct]
public:
    StickyForceData::Ground [variable]
    StickyForceData::Wall [variable]
    StickyForceData::StickyForceData() [constructor]
    StickyForceData::StickyForceData(StickyForceData const & arg0) [constructor]
    StickyForceData & StickyForceData::operator=(StickyForceData const & arg0) [member operator]
    StickyForceData::~StickyForceData() [destructor]

WheelContactData [struct]
public:
    WheelContactData::bHasContact [variable]
    WheelContactData::bHasContactWithWorldGeometry [variable]
    WheelContactData::HasContactChangeTime [variable]
    WheelContactData::Actor [variable]
    WheelContactData::Component [variable]
    WheelContactData::Location [variable]
    WheelContactData::Normal [variable]
    WheelContactData::LatDirection [variable]
    WheelContactData::LongDirection [variable]
    WheelContactData::PhysMatProp [variable]
    WheelContactData::WheelContactData() [constructor]
    WheelContactData::WheelContactData(WheelContactData const & arg0) [constructor]
    WheelContactData & WheelContactData::operator=(WheelContactData const & arg0) [member operator]
    WheelContactData::~WheelContactData() [destructor]

ReplayScoreData [struct]
public:
    ReplayScoreData::ScoredBy [variable]
    ReplayScoreData::AssistedBy [variable]
    ReplayScoreData::Speed [variable]
    ReplayScoreData::Time [variable]
    ReplayScoreData::ScoreTeam [variable]
    ReplayScoreData::ReplayScoreData() [constructor]
    ReplayScoreData::ReplayScoreData(ReplayScoreData const & arg0) [constructor]
    ReplayScoreData & ReplayScoreData::operator=(ReplayScoreData const & arg0) [member operator]
    ReplayScoreData::~ReplayScoreData() [destructor]

VideoSettings [struct]
public:
    VideoSettings::bVsync [variable]
    VideoSettings::bShowWeatherFX [variable]
    VideoSettings::bShowLightShafts [variable]
    VideoSettings::bTranslucentArenaShaders [variable]
    VideoSettings::bShowLensFlares [variable]
    VideoSettings::bEnableHDRSideBySideVisualizer [variable]
    VideoSettings::bUncappedFramerate [variable]
    VideoSettings::HDRBrightnessScale [variable]
    VideoSettings::HDRPaperWhiteScale [variable]
    VideoSettings::HDRGammaScale [variable]
    VideoSettings::WindowMode [variable]
    VideoSettings::Resolution [variable]
    VideoSettings::MaxFPS [variable]
    VideoSettings::VideoOptions [variable]
    VideoSettings::VideoSettings(VideoSettings const & arg0) [constructor]
    VideoSettings::~VideoSettings() [destructor]
    VideoSettings::VideoSettings() [constructor]
    VideoSettings & VideoSettings::operator=(VideoSettings const & arg0) [member operator]

GUIDWrapper [struct]
public:
    GUIDWrapper::GUIDWrapper(int32_t a, int32_t b, int32_t c, int32_t d) [constructor]
    GUIDWrapper::GUIDWrapper(FGuid const & guid) [constructor]
    GUIDWrapper::EGuidFormats [enumeration]
        ('Digits', 0)
        ('DigitsWithHyphens', 1)
        ('DigitsWithHyphensInBraces', 2)
        ('DigitsWithHyphensInParentheses', 3)
        ('HexValuesInBraces', 4)
        ('UniqueObjectGuid', 5)

    GUIDWrapper::A [variable]
    GUIDWrapper::B [variable]
    GUIDWrapper::C [variable]
    GUIDWrapper::D [variable]
    std::string GUIDWrapper::ToString(GUIDWrapper::EGuidFormats format=::GUIDWrapper::UniqueObjectGuid) const [member function]
    GUIDWrapper::GUIDWrapper(GUIDWrapper const & arg0) [constructor]
    GUIDWrapper & GUIDWrapper::operator=(GUIDWrapper const & arg0) [member operator]
    GUIDWrapper::~GUIDWrapper() [destructor]

TRADEHOLD [enumeration]
    ('TRADEHOLD_P2P', -2)
    ('TRADEHOLD_ALL', -1)
    ('TRADEHOLD_NONE', 0)

PRODUCTQUALITY [enumeration]
    ('Common', 0)
    ('Uncommon', 1)
    ('Rare', 2)
    ('VeryRare', 3)
    ('Import', 4)
    ('Exotic', 5)
    ('BlackMarket', 6)
    ('Premium', 7)
    ('Limited', 8)
    ('MAX', 9)

UNLOCKMETHOD [enumeration]
    ('Default', 0)
    ('Drop', 1)
    ('Special', 2)
    ('Reward', 3)
    ('DLC', 4)
    ('Never', 5)
    ('MAX_', 6)

CARBODY [enumeration]
    ('CAR_BACKFIRE', 21)
    ('CAR_BREAKOUT', 22)
    ('CAR_BREAKOUTTYPES', 1416)
    ('CAR_OCTANE', 23)
    ('CAR_OCTANEZSR', 1568)
    ('CAR_PALADIN', 24)
    ('CAR_ROADHOG', 25)
    ('CAR_ROADHOGXL', 1300)
    ('CAR_GIZMO', 26)
    ('CAR_SWEETTOOTH', 27)
    ('CAR_XDEVIL', 28)
    ('CAR_XDEVILMK2', 1159)
    ('CAR_HOTSHOT', 29)
    ('CAR_MERC', 30)
    ('CAR_VENOM', 31)
    ('CAR_TAKUMI', 402)
    ('CAR_TAKUMIRXT', 1295)
    ('CAR_DOMINUS', 403)
    ('CAR_DOMINUSGT', 1018)
    ('CAR_SCARAB', 404)
    ('CAR_ZIPPY', 523)
    ('CAR_DELOREAN', 597)
    ('CAR_RIPPER', 600)
    ('CAR_GROG', 607)
    ('CAR_ARMADILLO', 625)
    ('CAR_WARTHOG', 723)
    ('CAR_BATMOBILE', 803)
    ('CAR_MASAMUNE', 1171)
    ('CAR_MARAUDER', 1172)
    ('CAR_AFTERSHOCK', 1286)
    ('CAR_ESPER', 1317)
    ('CAR_PROTEUS', 1475)
    ('CAR_TRITON', 1478)
    ('CAR_VULCAN', 1533)
    ('CAR_TWINMILL', 1603)
    ('CAR_BONESHAKER', 1623)
    ('CAR_ENDO', 1624)
    ('CAR_ICECHARGER', 1675)
    ('CAR_MANTIS', 1691)
    ('CAR_JOGER619RS', 1856)
    ('CAR_CENTIO', 1919)
    ('CAR_ANIMUSGP', 1932)

OnlinePlatform [enumeration]
    ('OnlinePlatform_Unknown', 0)
    ('OnlinePlatform_Steam', 1)
    ('OnlinePlatform_PS4', 2)
    ('OnlinePlatform_PS3', 3)
    ('OnlinePlatform_Dingo', 4)
    ('OnlinePlatform_QQ', 5)
    ('OnlinePlatform_OldNNX', 6)
    ('OnlinePlatform_NNX', 7)
    ('OnlinePlatform_PsyNet', 8)
    ('OnlinePlatform_Deleted', 9)
    ('OnlinePlatform_WeGame', 10)
    ('OnlinePlatform_Epic', 11)
    ('OnlinePlatform_MAX', 12)

FGuid [class declaration]
