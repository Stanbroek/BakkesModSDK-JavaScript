void bind_BaseCameraWrapper([[maybe_unused]] v8::Isolate* isolate, v8pp::module& module)
{

	v8pp::class_<BaseCameraWrapper> cl_BaseCameraWrapper(isolate);
	cl_BaseCameraWrapper.inherit<ActorWrapper>();
	cl_BaseCameraWrapper.ctor<uintptr_t>();
	cl_BaseCameraWrapper.set<float(BaseCameraWrapper::*)()>("GetDefaultFOV", &BaseCameraWrapper::GetDefaultFOV);
	cl_BaseCameraWrapper.set<void(BaseCameraWrapper::*)(float)>("SetDefaultFOV", &BaseCameraWrapper::SetDefaultFOV);
	cl_BaseCameraWrapper.set<long unsigned int(BaseCameraWrapper::*)()>("GetbLockedFOV", &BaseCameraWrapper::GetbLockedFOV);
	cl_BaseCameraWrapper.set<void(BaseCameraWrapper::*)(long unsigned int)>("SetbLockedFOV", &BaseCameraWrapper::SetbLockedFOV);
	cl_BaseCameraWrapper.set<long unsigned int(BaseCameraWrapper::*)()>("GetbConstrainAspectRatio", &BaseCameraWrapper::GetbConstrainAspectRatio);
	cl_BaseCameraWrapper.set<void(BaseCameraWrapper::*)(long unsigned int)>("SetbConstrainAspectRatio", &BaseCameraWrapper::SetbConstrainAspectRatio);
	cl_BaseCameraWrapper.set<long unsigned int(BaseCameraWrapper::*)()>("GetbEnableFading", &BaseCameraWrapper::GetbEnableFading);
	cl_BaseCameraWrapper.set<void(BaseCameraWrapper::*)(long unsigned int)>("SetbEnableFading", &BaseCameraWrapper::SetbEnableFading);
	cl_BaseCameraWrapper.set<long unsigned int(BaseCameraWrapper::*)()>("GetbFadeAudio", &BaseCameraWrapper::GetbFadeAudio);
	cl_BaseCameraWrapper.set<void(BaseCameraWrapper::*)(long unsigned int)>("SetbFadeAudio", &BaseCameraWrapper::SetbFadeAudio);
	cl_BaseCameraWrapper.set<long unsigned int(BaseCameraWrapper::*)()>("GetbForceDisableTemporalAA", &BaseCameraWrapper::GetbForceDisableTemporalAA);
	cl_BaseCameraWrapper.set<void(BaseCameraWrapper::*)(long unsigned int)>("SetbForceDisableTemporalAA", &BaseCameraWrapper::SetbForceDisableTemporalAA);
	cl_BaseCameraWrapper.set<long unsigned int(BaseCameraWrapper::*)()>("GetbEnableColorScaling", &BaseCameraWrapper::GetbEnableColorScaling);
	cl_BaseCameraWrapper.set<void(BaseCameraWrapper::*)(long unsigned int)>("SetbEnableColorScaling", &BaseCameraWrapper::SetbEnableColorScaling);
	cl_BaseCameraWrapper.set<long unsigned int(BaseCameraWrapper::*)()>("GetbEnableColorScaleInterp", &BaseCameraWrapper::GetbEnableColorScaleInterp);
	cl_BaseCameraWrapper.set<void(BaseCameraWrapper::*)(long unsigned int)>("SetbEnableColorScaleInterp", &BaseCameraWrapper::SetbEnableColorScaleInterp);
	cl_BaseCameraWrapper.set<long unsigned int(BaseCameraWrapper::*)()>("GetbUseClientSideCameraUpdates", &BaseCameraWrapper::GetbUseClientSideCameraUpdates);
	cl_BaseCameraWrapper.set<void(BaseCameraWrapper::*)(long unsigned int)>("SetbUseClientSideCameraUpdates", &BaseCameraWrapper::SetbUseClientSideCameraUpdates);
	cl_BaseCameraWrapper.set<long unsigned int(BaseCameraWrapper::*)()>("GetbDebugClientSideCamera", &BaseCameraWrapper::GetbDebugClientSideCamera);
	cl_BaseCameraWrapper.set<void(BaseCameraWrapper::*)(long unsigned int)>("SetbDebugClientSideCamera", &BaseCameraWrapper::SetbDebugClientSideCamera);
	cl_BaseCameraWrapper.set<long unsigned int(BaseCameraWrapper::*)()>("GetbShouldSendClientSideCameraUpdate", &BaseCameraWrapper::GetbShouldSendClientSideCameraUpdate);
	cl_BaseCameraWrapper.set<void(BaseCameraWrapper::*)(long unsigned int)>("SetbShouldSendClientSideCameraUpdate", &BaseCameraWrapper::SetbShouldSendClientSideCameraUpdate);
	cl_BaseCameraWrapper.set<float(BaseCameraWrapper::*)()>("GetLockedFOV", &BaseCameraWrapper::GetLockedFOV);
	cl_BaseCameraWrapper.set<void(BaseCameraWrapper::*)(float)>("SetLockedFOV", &BaseCameraWrapper::SetLockedFOV);
	cl_BaseCameraWrapper.set<float(BaseCameraWrapper::*)()>("GetConstrainedAspectRatio", &BaseCameraWrapper::GetConstrainedAspectRatio);
	cl_BaseCameraWrapper.set<void(BaseCameraWrapper::*)(float)>("SetConstrainedAspectRatio", &BaseCameraWrapper::SetConstrainedAspectRatio);
	cl_BaseCameraWrapper.set<float(BaseCameraWrapper::*)()>("GetDefaultAspectRatio", &BaseCameraWrapper::GetDefaultAspectRatio);
	cl_BaseCameraWrapper.set<void(BaseCameraWrapper::*)(float)>("SetDefaultAspectRatio", &BaseCameraWrapper::SetDefaultAspectRatio);
	cl_BaseCameraWrapper.set<float(BaseCameraWrapper::*)()>("GetOffAxisYawAngle", &BaseCameraWrapper::GetOffAxisYawAngle);
	cl_BaseCameraWrapper.set<void(BaseCameraWrapper::*)(float)>("SetOffAxisYawAngle", &BaseCameraWrapper::SetOffAxisYawAngle);
	cl_BaseCameraWrapper.set<float(BaseCameraWrapper::*)()>("GetOffAxisPitchAngle", &BaseCameraWrapper::GetOffAxisPitchAngle);
	cl_BaseCameraWrapper.set<void(BaseCameraWrapper::*)(float)>("SetOffAxisPitchAngle", &BaseCameraWrapper::SetOffAxisPitchAngle);
	cl_BaseCameraWrapper.set<UnrealColor(BaseCameraWrapper::*)()>("GetFadeColor", &BaseCameraWrapper::GetFadeColor);
	cl_BaseCameraWrapper.set<void(BaseCameraWrapper::*)(UnrealColor)>("SetFadeColor", &BaseCameraWrapper::SetFadeColor);
	cl_BaseCameraWrapper.set<float(BaseCameraWrapper::*)()>("GetFadeAmount", &BaseCameraWrapper::GetFadeAmount);
	cl_BaseCameraWrapper.set<void(BaseCameraWrapper::*)(float)>("SetFadeAmount", &BaseCameraWrapper::SetFadeAmount);
	cl_BaseCameraWrapper.set<float(BaseCameraWrapper::*)()>("GetCamOverridePostProcessAlpha", &BaseCameraWrapper::GetCamOverridePostProcessAlpha);
	cl_BaseCameraWrapper.set<void(BaseCameraWrapper::*)(float)>("SetCamOverridePostProcessAlpha", &BaseCameraWrapper::SetCamOverridePostProcessAlpha);
	cl_BaseCameraWrapper.set<Vector(BaseCameraWrapper::*)()>("GetColorScale", &BaseCameraWrapper::GetColorScale);
	cl_BaseCameraWrapper.set<void(BaseCameraWrapper::*)(Vector)>("SetColorScale", &BaseCameraWrapper::SetColorScale);
	cl_BaseCameraWrapper.set<Vector(BaseCameraWrapper::*)()>("GetDesiredColorScale", &BaseCameraWrapper::GetDesiredColorScale);
	cl_BaseCameraWrapper.set<void(BaseCameraWrapper::*)(Vector)>("SetDesiredColorScale", &BaseCameraWrapper::SetDesiredColorScale);
	cl_BaseCameraWrapper.set<Vector(BaseCameraWrapper::*)()>("GetOriginalColorScale", &BaseCameraWrapper::GetOriginalColorScale);
	cl_BaseCameraWrapper.set<void(BaseCameraWrapper::*)(Vector)>("SetOriginalColorScale", &BaseCameraWrapper::SetOriginalColorScale);
	cl_BaseCameraWrapper.set<float(BaseCameraWrapper::*)()>("GetColorScaleInterpDuration", &BaseCameraWrapper::GetColorScaleInterpDuration);
	cl_BaseCameraWrapper.set<void(BaseCameraWrapper::*)(float)>("SetColorScaleInterpDuration", &BaseCameraWrapper::SetColorScaleInterpDuration);
	cl_BaseCameraWrapper.set<float(BaseCameraWrapper::*)()>("GetColorScaleInterpStartTime", &BaseCameraWrapper::GetColorScaleInterpStartTime);
	cl_BaseCameraWrapper.set<void(BaseCameraWrapper::*)(float)>("SetColorScaleInterpStartTime", &BaseCameraWrapper::SetColorScaleInterpStartTime);
	cl_BaseCameraWrapper.set<ViewTarget(BaseCameraWrapper::*)()>("GetViewTarget", &BaseCameraWrapper::GetViewTarget);
	cl_BaseCameraWrapper.set<void(BaseCameraWrapper::*)(ViewTarget)>("SetViewTarget", &BaseCameraWrapper::SetViewTarget);
	cl_BaseCameraWrapper.set<ViewTarget(BaseCameraWrapper::*)()>("GetPendingViewTarget", &BaseCameraWrapper::GetPendingViewTarget);
	cl_BaseCameraWrapper.set<void(BaseCameraWrapper::*)(ViewTarget)>("SetPendingViewTarget", &BaseCameraWrapper::SetPendingViewTarget);
	cl_BaseCameraWrapper.set<float(BaseCameraWrapper::*)()>("GetBlendTimeToGo", &BaseCameraWrapper::GetBlendTimeToGo);
	cl_BaseCameraWrapper.set<void(BaseCameraWrapper::*)(float)>("SetBlendTimeToGo", &BaseCameraWrapper::SetBlendTimeToGo);
	cl_BaseCameraWrapper.set<float(BaseCameraWrapper::*)()>("GetFreeCamDistance", &BaseCameraWrapper::GetFreeCamDistance);
	cl_BaseCameraWrapper.set<void(BaseCameraWrapper::*)(float)>("SetFreeCamDistance", &BaseCameraWrapper::SetFreeCamDistance);
	cl_BaseCameraWrapper.set<Vector(BaseCameraWrapper::*)()>("GetFreeCamOffset", &BaseCameraWrapper::GetFreeCamOffset);
	cl_BaseCameraWrapper.set<void(BaseCameraWrapper::*)(Vector)>("SetFreeCamOffset", &BaseCameraWrapper::SetFreeCamOffset);
	cl_BaseCameraWrapper.set<float(BaseCameraWrapper::*)()>("GetFadeTime", &BaseCameraWrapper::GetFadeTime);
	cl_BaseCameraWrapper.set<void(BaseCameraWrapper::*)(float)>("SetFadeTime", &BaseCameraWrapper::SetFadeTime);
	cl_BaseCameraWrapper.set<float(BaseCameraWrapper::*)()>("GetFadeTimeRemaining", &BaseCameraWrapper::GetFadeTimeRemaining);
	cl_BaseCameraWrapper.set<void(BaseCameraWrapper::*)(float)>("SetFadeTimeRemaining", &BaseCameraWrapper::SetFadeTimeRemaining);
	cl_BaseCameraWrapper.set<void(BaseCameraWrapper::*)(long unsigned int)>("StopAllCameraAnims", &BaseCameraWrapper::StopAllCameraAnims);
	cl_BaseCameraWrapper.set<void(BaseCameraWrapper::*)()>("ClearAllCameraShakes", &BaseCameraWrapper::ClearAllCameraShakes);
	cl_BaseCameraWrapper.set<float(BaseCameraWrapper::*)(BaseCameraWrapper, Vector &, float, float, float)>("CalcRadialShakeScale", &BaseCameraWrapper::CalcRadialShakeScale);
	cl_BaseCameraWrapper.set<void(BaseCameraWrapper::*)()>("ClearCameraLensEffects", &BaseCameraWrapper::ClearCameraLensEffects);
	cl_BaseCameraWrapper.set<void(BaseCameraWrapper::*)()>("ApplyAudioFade", &BaseCameraWrapper::ApplyAudioFade);
	cl_BaseCameraWrapper.set<void(BaseCameraWrapper::*)(float)>("UpdateFade", &BaseCameraWrapper::UpdateFade);
	cl_BaseCameraWrapper.set<void(BaseCameraWrapper::*)(float)>("DoUpdateCamera", &BaseCameraWrapper::DoUpdateCamera);
	cl_BaseCameraWrapper.set<void(BaseCameraWrapper::*)(float)>("eventUpdateCamera", &BaseCameraWrapper::eventUpdateCamera);
	cl_BaseCameraWrapper.set<void(BaseCameraWrapper::*)(Vector &, float)>("SetDesiredColorScale2", &BaseCameraWrapper::SetDesiredColorScale2);
	cl_BaseCameraWrapper.set<Rotator(BaseCameraWrapper::*)()>("GetCameraRotation", &BaseCameraWrapper::GetCameraRotation);
	cl_BaseCameraWrapper.set<void(BaseCameraWrapper::*)(float)>("SetFOV", &BaseCameraWrapper::SetFOV);
	cl_BaseCameraWrapper.set<float(BaseCameraWrapper::*)()>("GetFOVAngle", &BaseCameraWrapper::GetFOVAngle);
	cl_BaseCameraWrapper.set<void(BaseCameraWrapper::*)()>("eventDestroyed", &BaseCameraWrapper::eventDestroyed);
	cl_BaseCameraWrapper.set<void(BaseCameraWrapper::*)()>("PostBeginPlay", &BaseCameraWrapper::PostBeginPlay);

	module.set("BaseCameraWrapper", cl_BaseCameraWrapper);
}
